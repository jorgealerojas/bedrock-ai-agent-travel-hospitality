import os
import json
from typing import Dict

from serpapi import GoogleSearch
from aws_lambda_powertools import Logger, Tracer
from aws_lambda_powertools.event_handler import BedrockAgentResolver
from aws_lambda_powertools.utilities.typing import LambdaContext
from aws_lambda_powertools.event_handler.openapi.params import Query

API_KEY = os.environ.get('API_KEY')

tracer = Tracer()
logger = Logger()
app = BedrockAgentResolver()

@app.get("/check_portfolio", description="Check stock portfolio value and compare with travel budget using Google Finance")
@tracer.capture_method
def check_portfolio(
    travel_budget: Annotated[float, Query(description="Estimated travel budget to compare against portfolio value")] = None
) -> Dict:
    """Check portfolio value and compare with travel budget."""
    try:
        portfolio_str = os.environ.get('STOCK_PORTFOLIO', '{}')
        portfolio = json.loads(portfolio_str)
        
        if not portfolio:
            return {
                'statusCode': 400,
                'body': json.dumps({
                    'error': 'No portfolio configured'
                })
            }
        
        total_value = 0
        stock_values = {}
        
        for symbol, quantity in portfolio.items():
            params = {
                "engine": "google_finance",
                "q": symbol,
                "api_key": API_KEY
            }
            
            search = GoogleSearch(params)
            results = search.get_dict()
            
            if results.get('error'):
                logger.error(f"Error fetching price for {symbol}: {results['error']}")
                continue
                
            try:
                price = float(results.get('price', 0))
                value = price * quantity
                total_value += value
                stock_values[symbol] = {
                    'quantity': quantity,
                    'price': price,
                    'value': value
                }
            except (KeyError, ValueError) as e:
                logger.error(f"Error processing price for {symbol}: {str(e)}")
                continue
        
        result = {
            'total_value': total_value,
            'stocks': stock_values
        }
        
        if travel_budget is not None:
            result.update({
                'can_afford_travel': total_value >= travel_budget,
                'travel_budget': travel_budget,
                'remaining_after_travel': total_value - float(travel_budget)
            })
        
        return {
            'statusCode': 200,
            'body': json.dumps(result)
        }
        
    except Exception as e:
        logger.error(f"Error in portfolio checking: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps({
                'error': f"Internal server error: {str(e)}"
            })
        }

@logger.inject_lambda_context
@tracer.capture_lambda_handler
def lambda_handler(event: dict, context: LambdaContext):
    """Main Lambda handler."""
    return app.resolve(event, context)

if __name__ == "__main__":
    # This displays the autogenerated openapi schema
    print(
        app.get_openapi_json_schema(
            title="Portfolio Checker API",
            version="1.0.0",
            description="API for checking stock portfolio value and comparing with travel costs",
            tags=["finance", "portfolio", "stocks"],
        ),
    ) 